<?xml version="1.0" encoding="UTF-8"?>

<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- Configuration management that reads some parameters from the KAT Executor configuration file
    and injects them for further use in this blueprint -->
    <cm:property-placeholder persistent-id="com.idfor.kat.tools.katexec" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="katexec.default.cxf.services.relative.path" value="/katexec"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <!-- Definition of web services root address and implementation bean
        All webservices will be mapped to the address defined by property katexec.default.cxf.services.relative.path
        from KAT Executor configuration file. The default address is http://0.0.0.0:9999/katexec -->
    <jaxrs:server id="katExecService" address="${katexec.default.cxf.services.relative.path}">
        <jaxrs:serviceBeans>
            <ref component-id="katExecServiceBean" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
            <ref component-id="authenticationFilter"/>
            <ref component-id="authorizationFilter"/>
            <ref component-id="cors-filter" />
        </jaxrs:providers>
    </jaxrs:server>

    <!-- Enables CORS filter -->
    <bean id="cors-filter" class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter"/>

    <!-- Bean providing webservices implementation -->
    <bean id="katExecServiceBean" class="com.idfor.kat.tools.katexecbundle.ws.KatExecWebServicesImpl">
        <property name="bundleContext" ref="blueprintBundleContext"/>
    </bean>

    <!-- JAAS authentication bean, the value of contextName corresponds to the realm to use -->
    <bean id="authenticationFilter" class="org.apache.cxf.jaxrs.security.JAASAuthenticationFilter">
        <property name="contextName" value="karaf" />
    </bean>

    <!-- JAAS authorization bean, the value of interceptor points to the bean to use -->
    <bean id="authorizationFilter" class="org.apache.cxf.jaxrs.security.SimpleAuthorizingFilter">
        <property name="interceptor" ref="authorizationInterceptor" />
    </bean>

    <!-- Bean providing JAAS authorization for web services with a list of WS implementetion methods and associated JAAS roles-->
    <bean id="authorizationInterceptor" class="org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor">
        <property name="methodRolesMap">
            <map>
                <entry key="getJobs" value="${katexec.ws.auth.get.jobs}"/>
                <entry key="getJob" value="${katexec.ws.auth.get.jobs_pid}"/>
                <entry key="jobAction" value="${katexec.ws.auth.put.jobs}"/>
                <entry key="isScheduled" value="${katexec.ws.auth.get.jobs.scheduled_job_version}"/>
            </map>
        </property>
    </bean>

    <!-- Bean used to monitor KAT Executor config file changes -->
    <bean id="propertiesWatcherBean" class="com.idfor.kat.tools.katexecbundle.run.PropertiesWatcher" init-method="init" destroy-method="destroy">
        <property name="bundleContext" ref="blueprintBundleContext"/>
    </bean>

    <!-- Bean used to initialize and destroy job list -->
    <bean id="jobListBean" class="com.idfor.kat.tools.katexecbundle.beans.JobList" init-method="init" destroy-method="destroy">
    </bean>

    <!-- Implementation of the jobs factory. All configuration files created in the ${karaf.base}/etc/jobexec
        will be monitored for addition, deletion and modification. Each action on these files will have a related
        action on the cheduled jobs in the Karaf Scheduler.
        For this to work, it is important to have a org.apache.felix.fileinstall-jobexec.cfg configuration file
        in the ${karaf.base}/etc directory -->
    <bean id="jobFactoryBean" class="com.idfor.kat.tools.katexecbundle.run.JobFactory" init-method="init" destroy-method="destroy">
        <property name="bundleContext" ref="blueprintBundleContext"/>
        <property name="configurationPid" value="kat.job"/>
    </bean>

</blueprint>